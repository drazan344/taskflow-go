version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskflow_postgres
    environment:
      POSTGRES_USER: taskflow_user
      POSTGRES_PASSWORD: taskflow_password
      POSTGRES_DB: taskflow_db
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskflow_user -d taskflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow_network

  # TaskFlow API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: taskflow_api
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: taskflow_user
      DB_PASSWORD: taskflow_password
      DB_NAME: taskflow_db
      DB_SSLMODE: disable
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_EXPIRY: 24h
      JWT_REFRESH_EXPIRY: 720h
      
      # Server Configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      GIN_MODE: release
      
      # Email Configuration (configure as needed)
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASSWORD: your-app-password
      
      # File Storage
      UPLOAD_PATH: ./uploads
      MAX_UPLOAD_SIZE: 10MB
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 1m
      
      # Monitoring
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # Background Jobs
      WORKER_CONCURRENCY: 10
      WORKER_QUEUES: default,email,analytics
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - taskflow_network

  # Background Worker (optional - for processing background jobs)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: taskflow_worker
    environment:
      # Same environment variables as API
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: taskflow_user
      DB_PASSWORD: taskflow_password
      DB_NAME: taskflow_db
      DB_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      WORKER_CONCURRENCY: 10
      WORKER_QUEUES: default,email,analytics
      LOG_LEVEL: info
      LOG_FORMAT: json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - taskflow_network
    profiles:
      - worker  # Only start with --profile worker

  # Nginx Reverse Proxy (optional - for production)
  nginx:
    image: nginx:1.25-alpine
    container_name: taskflow_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - taskflow_network
    profiles:
      - nginx  # Only start with --profile nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  taskflow_network:
    driver: bridge